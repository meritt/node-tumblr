// Generated by CoffeeScript 1.6.3
/*
  node-tumblr 0.2.0
  (c) 2013 Greg Wang
*/


(function() {
  var RequestUtils, qs, request;

  module.exports = RequestUtils = {};

  request = require('request');

  qs = require('querystring');

  (function() {
    this.blogUrl = function(action, self, options) {
      var params, query;
      if (options == null) {
        options = {};
      }
      params = ['http://api.tumblr.com/v2/blog/', self.host + '/' + action, options.type != null ? '/' + options.type : void 0, '?'];
      if (options.type != null) {
        delete options.type;
      }
      options.api_key = self.consumer_key;
      query = qs.stringify(options);
      params.push(query);
      return params.join('');
    };
    this.userUrl = function(action, self, options) {
      var params, query;
      if (options == null) {
        options = {};
      }
      params = ['http://api.tumblr.com/v2/user/', action, '?'];
      query = qs.stringify(options);
      params.push(query);
      return params.join('');
    };
    this.req = function(url, method, fn, oauth) {
      var options;
      if (method == null) {
        method = 'GET';
      }
      options = {
        url: url,
        method: method,
        followRedirect: false,
        json: true
      };
      if (oauth != null) {
        options.oauth = oauth;
      }
      return request(options, function(err, response, body) {
        if (!err) {
          if (response.statusCode !== 200 && response.statusCode !== 301) {
            err = response.statusCode + ' ' + body.meta.msg;
          }
        }
        if (fn != null) {
          return fn.call(body, err, body.response);
        }
      });
    };
    this.get = function(url, fn) {
      return this.req(url, 'GET', fn);
    };
    this.post = function(url, fn) {
      return this.req(url, 'POST', fn);
    };
    this.oauthGet = function(url, oauth, fn) {
      return this.req(url, 'GET', fn, oauth);
    };
    return this.oauthPost = function(url, oauth, fn) {
      return this.req(url, 'POST', fn, oauth);
    };
  }).call(RequestUtils);

}).call(this);
